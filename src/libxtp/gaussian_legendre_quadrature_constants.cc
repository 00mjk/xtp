/*
 *            Copyright 2009-2019 The VOTCA Development Team
 *                       (http://www.votca.org)
 *
 *      Licensed under the Apache License, Version 2.0 (the "License")
 *
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *              http://www.apache.org/licenses/LICENSe-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#include <votca/xtp/eigen.h>
#include <votca/xtp/gauss_legendre_quadrature_constants.h>

using namespace std;

namespace votca {
namespace xtp {

const Eigen::VectorXd& Gauss_Legendre_Quadrature_Constants::getPoints(
    Index order) {
  if (!this->_filled_Points) {
    this->FillPoints();
    _filled_Points = true;
  }
  if (_map_points.count(order) == 0)
    throw invalid_argument("Order " + std::to_string(order) +
                           " not in range {8,10,12,...,20}.");
  return _map_points.at(order);
}

const Eigen::VectorXd& Gauss_Legendre_Quadrature_Constants::getAdaptedWeights(
    Index order) {
  if (!this->_filled_AdaptedWeights) {
    this->FillAdaptedWeights();
    _filled_AdaptedWeights = true;
  }
  if (_map_AdaptedWeights.count(order) == 0)
    throw invalid_argument("Order " + std::to_string(order) +
                           " not in range {8,10,12,...,20}.");
  return _map_AdaptedWeights.at(order);
}

void Gauss_Legendre_Quadrature_Constants::FillPoints() {


Eigen::VectorXd points_12(12);
  points_12 << -0.9815606342467192506906,
-0.9041172563704748566785,
-0.769902674194304687037,
-0.5873179542866174472967,
-0.3678314989981801937527,
-0.1252334085114689154724,
0.1252334085114689154724,
0.3678314989981801937527,
0.5873179542866174472967,
0.7699026741943046870369,
0.9041172563704748566785,
0.9815606342467192506906;
  _map_points[12] = points_12;


  Eigen::VectorXd points_40(40);
  points_40 << -0.9982377097105592003496,
-0.9907262386994570064531,
-0.9772599499837742626634,
-0.9579168192137916558045,
-0.9328128082786765333609,
-0.9020988069688742967283,
-0.8659595032122595038208,
-0.8246122308333116631963,
-0.778305651426519387695,
-0.727318255189927103281,
-0.6719566846141795483794,
-0.6125538896679802379526,
-0.5494671250951282020759,
-0.4830758016861787129086,
-0.4137792043716050015249,
-0.3419940908257584730075,
-0.2681521850072536811412,
-0.1926975807013710997155,
-0.1160840706752552084835,
-0.0387724175060508219332,
0.0387724175060508219332,
0.1160840706752552084835,
0.1926975807013710997155,
0.2681521850072536811412,
0.3419940908257584730075,
0.4137792043716050015249,
0.4830758016861787129086,
0.5494671250951282020759,
0.6125538896679802379526,
0.6719566846141795483794,
0.727318255189927103281,
0.778305651426519387695,
0.8246122308333116631963,
0.8659595032122595038208,
0.9020988069688742967283,
0.9328128082786765333609,
0.9579168192137916558045,
0.9772599499837742626634,
0.9907262386994570064531,
0.9982377097105592003496;
  _map_points[40] = points_40;


  Eigen::VectorXd points_60(60);
  points_60 << -0.9982377097105592003496,
-0.9907262386994570064531,
-0.9772599499837742626634,
-0.9579168192137916558045,
-0.9328128082786765333609,
-0.9020988069688742967283,
-0.8659595032122595038208,
-0.8246122308333116631963,
-0.778305651426519387695,
-0.727318255189927103281,
-0.6719566846141795483794,
-0.6125538896679802379526,
-0.5494671250951282020759,
-0.4830758016861787129086,
-0.4137792043716050015249,
-0.3419940908257584730075,
-0.2681521850072536811412,
-0.1926975807013710997155,
-0.1160840706752552084835,
-0.0387724175060508219332,
0.0387724175060508219332,
0.1160840706752552084835,
0.1926975807013710997155,
0.2681521850072536811412,
0.3419940908257584730075,
0.4137792043716050015249,
0.4830758016861787129086,
0.5494671250951282020759,
0.6125538896679802379526,
0.6719566846141795483794,
0.727318255189927103281,
0.778305651426519387695,
0.8246122308333116631963,
0.8659595032122595038208,
0.9020988069688742967283,
0.9328128082786765333609,
0.9579168192137916558045,
0.9772599499837742626634,
0.9907262386994570064531,
0.9982377097105592003496;
_map_points[60] = points_60;
}

void Gauss_Legendre_Quadrature_Constants::FillAdaptedWeights() {

    Eigen::VectorXd AdaptedWeights_12(12);
  AdaptedWeights_12 << 0.0471753363865118271946,
0.1069393259953184309603,
0.1600783285433462263347,
0.2031674267230659217491,
0.233492536538354808761,
0.2491470458134027850006,
0.2491470458134027850006,
0.233492536538354808761,
0.203167426723065921749,
0.160078328543346226335,
0.1069393259953184309603,
0.0471753363865118271946;

  _map_AdaptedWeights[12] = AdaptedWeights_12;

    Eigen::VectorXd AdaptedWeights_40(40);
  AdaptedWeights_40 << 0.0045212770985331912585,
0.0104982845311528136147,
0.0164210583819078887129,
0.0222458491941669572615,
0.0279370069800234010985,
0.0334601952825478473927,
0.03878216797447201764,
0.04387090818567327199168,
0.0486958076350722320614,
0.053227846983936824355,
0.057439769099391551367,
0.0613062424929289391665,
0.0648040134566010380746,
0.067912045815233903826,
0.0706116473912867796955,
0.0728865823958040590605,
0.0747231690579682642002,
0.0761103619006262423716,
0.077039818164247965588,
0.0775059479784248112637,
0.07750594797842481126372,
0.077039818164247965588,
0.0761103619006262423716,
0.0747231690579682642002,
0.0728865823958040590605,
0.0706116473912867796955,
0.067912045815233903826,
0.064804013456601038075,
0.0613062424929289391665,
0.057439769099391551367,
0.053227846983936824355,
0.0486958076350722320614,
0.0438709081856732719917,
0.03878216797447201764,
0.0334601952825478473927,
0.027937006980023401098,
0.0222458491941669572615,
0.0164210583819078887129,
0.0104982845311528136147,
0.0045212770985331912585;
  _map_AdaptedWeights[40] = AdaptedWeights_40;

 Eigen::VectorXd AdaptedWeights_60(60);
AdaptedWeights_60 << 0.0045212770985331912585,
0.0104982845311528136147,
0.0164210583819078887129,
0.0222458491941669572615,
0.0279370069800234010985,
0.0334601952825478473927,
0.03878216797447201764,
0.04387090818567327199168,
0.0486958076350722320614,
0.053227846983936824355,
0.057439769099391551367,
0.0613062424929289391665,
0.0648040134566010380746,
0.067912045815233903826,
0.0706116473912867796955,
0.0728865823958040590605,
0.0747231690579682642002,
0.0761103619006262423716,
0.077039818164247965588,
0.0775059479784248112637,
0.07750594797842481126372,
0.077039818164247965588,
0.0761103619006262423716,
0.0747231690579682642002,
0.0728865823958040590605,
0.0706116473912867796955,
0.067912045815233903826,
0.064804013456601038075,
0.0613062424929289391665,
0.057439769099391551367,
0.053227846983936824355,
0.0486958076350722320614,
0.0438709081856732719917,
0.03878216797447201764,
0.0334601952825478473927,
0.027937006980023401098,
0.0222458491941669572615,
0.0164210583819078887129,
0.0104982845311528136147,
0.0045212770985331912585;
_map_AdaptedWeights[60] = AdaptedWeights_60;
}
}}