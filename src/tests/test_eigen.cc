/*
 * Copyright 2009-2018 The VOTCA Development Team (http://www.votca.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
#define BOOST_TEST_MAIN

#define BOOST_TEST_MODULE eigen_test
#include <boost/test/unit_test.hpp>
#include <votca/xtp/votca_config.h>


#if defined(MKL)
    #define EIGEN_USE_MKL_ALL 
#endif
#include <Eigen/Dense>
#include <iostream>


BOOST_AUTO_TEST_SUITE(eigen_test)

BOOST_AUTO_TEST_CASE(inverse_test) {
  Eigen::MatrixXd m=Eigen::MatrixXd::Zero(17,17);
  m<< -0.996559,-0.223082,-2.02362e-15,-1.26901e-16,5.83905e-15,4.40116e-16,-1.46764e-16,9.20922e-18,0.0301914,3.22634e-16,-8.28103e-17,-2.95257e-16,0.102052,3.9003e-15,7.97116e-15,-1.41933e-14,0.111923,
-0.0445144,0.883156,1.02097e-14,-1.26405e-15,-2.26804e-14,-1.30414e-14,1.46913e-15,-9.30117e-16,-0.866122,1.62606e-15,5.01837e-15,-2.46783e-15,0.938325,4.56484e-14,9.18895e-14,-1.63487e-13,1.28767,
-6.94604e-17,2.78006e-14,-0.261977,0.394429,0.940129,-0.0466455,0.186123,0.412964,-1.60935e-15,0.289919,-0.276086,-0.116552,1.28101e-15,-0.0801116,0.11437,0.0749004,3.26139e-15,
-1.78339e-17,7.4758e-15,0.490708,-0.802058,0.473242,0.452765,0.00670425,0.0481195,-5.75767e-15,0.299478,0.260965,0.126773,-7.6847e-16,0.135497,0.0779744,0.0258613,-7.73715e-15,
-1.28299e-17,-8.39111e-15,0.893657,0.556038,0.015743,0.0135881,0.415536,-0.185747,7.75006e-17,-0.0109941,-0.171857,0.379744,1.26524e-15,-0.0181916,0.0771229,-0.137221,-2.23611e-14,
0.0472716,0.235837,-2.55047e-15,3.59918e-15,-7.92327e-15,9.32382e-15,1.24975e-16,-1.14597e-15,0.599523,-7.33055e-15,-1.91542e-15,4.26771e-15,-1.8333,-1.48813e-13,-3.05966e-13,5.38121e-13,-4.24316,
8.83933e-17,-5.61474e-15,0.0408465,-0.0614978,-0.146581,0.0392888,-0.156769,-0.347834,1.0418e-14,-1.28643,1.22505,0.517166,-2.73169e-15,0.514979,-0.735199,-0.48148,-2.43744e-14,
-7.76079e-18,-8.21543e-16,-0.0765093,0.125054,-0.0737861,-0.381358,-0.0056469,-0.0405304,1.60942e-16,-1.32885,-1.15795,-0.562516,2.29424e-15,-0.871014,-0.501241,-0.166243,4.69106e-14,
1.44531e-16,1.14947e-15,-0.139336,-0.0866953,-0.00245459,-0.011445,-0.35,0.156452,3.39894e-15,0.048783,0.762565,-1.685,-5.8284e-15,0.11694,-0.495767,0.882091,1.4365e-13,
-0.00106227,0.0237672,0.00314709,0.000416127,0.00400713,-0.391913,-0.568074,-0.257102,0.343823,0.424164,-0.137118,0.285975,0.600309,-0.101306,-0.733951,0.0993039,-0.0554949,
-0.00928842,-0.0414346,0.056396,0.007457,0.0718079,0.00149282,0.00216383,0.000979317,0.0301047,0.714805,-0.231073,0.481928,-0.0095153,0.286246,2.07381,-0.280587,1.24406,
-0.00106227,0.0237672,-0.00461622,0.00179577,0.00126498,0.479025,0.220481,-0.514129,0.343823,0.00105227,-0.26781,-0.456919,0.600309,0.537709,0.11093,-0.507318,-0.0554949,
-0.00928842,-0.0414346,-0.0827228,0.0321803,0.0226684,-0.00182463,-0.000839823,0.00195835,0.0301047,0.00177329,-0.451316,-0.770004,-0.0095153,-1.51932,-0.313438,1.43345,1.24406,
-0.00106227,0.0237672,0.00186441,0.00270205,-0.00391885,0.366536,-0.20796,0.603994,0.343823,-0.440289,-0.11494,0.270985,0.600309,0.200404,0.31383,0.648196,-0.0554949,
-0.00928842,-0.0414346,0.0334102,0.0484208,-0.0702258,-0.00139616,0.000792132,-0.00230065,0.0301047,-0.741979,-0.193698,0.456666,-0.0095153,-0.566249,-0.886739,-1.8315,1.24406,
-0.00106227,0.0237672,-0.000395277,-0.00491395,-0.00135326,-0.453649,0.555554,0.167237,0.343823,0.0150724,0.519868,-0.100041,0.600309,-0.636806,0.309191,-0.240181,-0.0554949,
-0.00928842,-0.0414346,-0.00708336,-0.0880581,-0.0242504,0.00172797,-0.00211614,-0.000637014,0.0301047,0.0254002,0.876086,-0.16859,-0.0095153,1.79932,-0.873633,0.678642,1.24406;
  Eigen::MatrixXd inv=m.inverse();
  

  std::cout<<m*inv<<std::endl;
bool check_inv=(m*inv).isApprox(Eigen::MatrixXd::Identity(17,17),0.01);
  
BOOST_CHECK_EQUAL(check_inv, 1);

}

BOOST_AUTO_TEST_SUITE_END()
