/*
 * Copyright 2009-2018 The VOTCA Development Team (http://www.votca.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
#define BOOST_TEST_MAIN

#define BOOST_TEST_MODULE eigen_test
#include <boost/test/unit_test.hpp>
#include <votca/tools/linalg.h>



#include <Eigen/Dense>



BOOST_AUTO_TEST_SUITE(eigen_test)

BOOST_AUTO_TEST_CASE(inverse_test) {
  Eigen::MatrixXd m=Eigen::MatrixXd::Zero(17,17);
  m<< -0.996559,-0.223082,5.91974e-17,6.78136e-15,1.53089e-16,2.62811e-16 -1.85615e-16,1.68485e-16,0.0301914 -2.86013e-16,-5.7544e-17,6.74374e-17,-0.102052,5.21284e-15,1.35933e-14,1.38742e-14, 0.111923,
-0.0445144, 0.883156,7.56339e-16 -2.66319e-14, 2.3306e-15 -6.76542e-15 -2.36616e-15 -5.22325e-15,-0.866122,3.08781e-15 -1.24748e-15,1.94376e-15,-0.938325,5.98271e-14,1.56236e-13,1.60661e-13,1.28767,
-6.31006e-17,3.11157e-14, 0.234182, 0.999653,-0.232168, -0.0454723, 0.194586, 0.409177 -4.33334e-15,-0.298524, 0.290189,0.0231326 -1.46758e-15,0.0429997,0.0973691,-0.117383,4.75314e-16,
-1.27936e-17,7.43676e-15,-0.029467, 0.244588, 1.0234, 0.437309, -0.0887328,0.0907959 -2.06432e-15, 0.267888,0.28681,-0.140845,5.37764e-17,-0.152156, 0.035702, -0.0261229,5.87377e-15,
 -1.4962e-17 -6.89206e-15,1.02584,-0.221179,0.0823976, 0.118531,0.40202,-0.178009 -1.44676e-15,-0.113933, -0.0859752,-0.391776 -1.54911e-15,0.0103955, 0.119804, 0.103186 -2.87513e-14,
 0.0472716, 0.235837 -2.69923e-15 -8.05953e-15,-5.8703e-15, 3.9968e-15,6.43929e-15, 2.2829e-15, 0.599523,2.58127e-15,1.72605e-15,7.25114e-16, 1.8333 -2.01505e-13 -5.23137e-13 -5.32494e-13, -4.24316,
 4.51028e-17 -5.92582e-15, -0.0365128,-0.155862,0.0361988,0.0383007,-0.163897,-0.344644,1.25455e-14,1.32461, -1.28763,-0.102644,4.96825e-15,-0.276414,-0.625915, 0.754567 -3.80251e-15,
-5.89806e-17 -9.85323e-16, 0.00459439, -0.0381352,-0.159565,-0.368339,0.0747384, -0.0764761 -3.33067e-15, -1.18867, -1.27264,0.62496 -2.77556e-17, 0.978098,-0.229502, 0.167925 -4.05509e-14,
 1.49186e-16,1.15186e-15,-0.159944,0.0344855, -0.0128471, -0.0998373,-0.338615, 0.149935,7.16094e-15, 0.505545,0.38149,1.73839,7.95197e-15, -0.0668249,-0.770133,-0.663306,1.85463e-13,
 -0.00106227,0.0237672, 0.00345038, 0.00286859, 0.00244961,-0.476569,-0.474238,-0.300641, 0.343823,-0.106018, 0.360085,-0.373627,-0.600309, 0.268995, -0.68876, 0.109819, -0.0554949,
 -0.00928842, -0.0414346,0.0618308,0.0514051, 0.043897, 0.00181528,0.0018064, 0.00114516,0.0301047,-0.178663, 0.606819,-0.629639,0.0095153,-0.760058,1.94612,-0.310299,1.24406,
 -0.00106227,0.0237672,-0.00213711, 0.00273732,-0.00375157, 0.561491,0.11084,-0.463517, 0.343823,-0.331819,0.0655263, 0.407555,-0.600309,-0.503233, 0.158348, 0.529614, -0.0554949,
 -0.00928842, -0.0414346, -0.0382971,0.0490528, -0.0672282,-0.00213875 -0.000422197, 0.00176556,0.0301047,-0.559184, 0.110426, 0.686815,0.0095153,1.42191, -0.44742, -1.49645,1.24406,
 -0.00106227,0.0237672, 0.00230236,-0.00410893,-0.00198753, 0.255206,-0.276553, 0.633083, 0.343823, -0.0610845,-0.486183,-0.200981,-0.600309,-0.325624,0.0361359,-0.671917, -0.0554949,
 -0.00928842, -0.0414346,0.0412584, -0.0736321, -0.0356166 -0.000972094, 0.00105341,-0.00241145,0.0301047, -0.10294,-0.819319,-0.338695,0.0095153, 0.920064,-0.102103,1.89853,1.24406,
 -0.00106227,0.0237672,-0.00361562,-0.00149698,0.0032895,-0.340128, 0.639951, 0.131075, 0.343823, 0.498922,0.0605711, 0.167053,-0.600309, 0.559862, 0.494275,0.0324836, -0.0554949,
 -0.00928842, -0.0414346,-0.064792, -0.0268258,0.0589479, 0.00129557,-0.00243761 -0.000499273,0.0301047, 0.840787, 0.102075, 0.281519,0.0095153, -1.58191,-1.3966, -0.0917838,1.24406;
  Eigen::MatrixXd inv=m.inverse();
  
 std::cout<<m<<std::endl;

 std::cout<<inv<<std::endl;

  std::cout<<m*inv<<std::endl;
bool check_inv=(m*inv).isApprox(Eigen::MatrixXd::Identity(17,17),0.01);
  
BOOST_CHECK_EQUAL(check_inv, 1);

}

BOOST_AUTO_TEST_SUITE_END()
