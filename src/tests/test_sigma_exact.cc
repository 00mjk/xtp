/*
 * Copyright 2009-2018 The VOTCA Development Team (http://www.votca.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
#define BOOST_TEST_MAIN

#define BOOST_TEST_MODULE sigma_test
#include <boost/test/unit_test.hpp>
#include <votca/xtp/sigma_spectral.h>
#include <fstream> 
#include <votca/xtp/orbitals.h>
#include <votca/xtp/aobasis.h>
#include <votca/xtp/threecenter.h>
#include <votca/xtp/rpa.h>

using namespace votca::xtp;
using namespace std;

BOOST_AUTO_TEST_SUITE(sigma_test)

BOOST_AUTO_TEST_CASE(sigma_full) {

  ofstream xyzfile("molecule.xyz");
  xyzfile << " 5" << endl;
  xyzfile << " methane" << endl;
  xyzfile << " C            .000000     .000000     .000000" << endl;
  xyzfile << " H            .629118     .629118     .629118" << endl;
  xyzfile << " H           -.629118    -.629118     .629118" << endl;
  xyzfile << " H            .629118    -.629118    -.629118" << endl;
  xyzfile << " H           -.629118     .629118    -.629118" << endl;
  xyzfile.close();

  ofstream basisfile("3-21G.xml");
  basisfile << "<basis name=\"3-21G\">" << endl;
  basisfile << "  <element name=\"H\">" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"S\">" << endl;
  basisfile << "      <constant decay=\"5.447178e+00\">" << endl;
  basisfile << "        <contractions factor=\"1.562850e-01\" type=\"S\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "      <constant decay=\"8.245470e-01\">" << endl;
  basisfile << "        <contractions factor=\"9.046910e-01\" type=\"S\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"S\">" << endl;
  basisfile << "      <constant decay=\"1.831920e-01\">" << endl;
  basisfile << "        <contractions factor=\"1.000000e+00\" type=\"S\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "  </element>" << endl;
  basisfile << "  <element name=\"C\">" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"S\">" << endl;
  basisfile << "      <constant decay=\"1.722560e+02\">" << endl;
  basisfile << "        <contractions factor=\"6.176690e-02\" type=\"S\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "      <constant decay=\"2.591090e+01\">" << endl;
  basisfile << "        <contractions factor=\"3.587940e-01\" type=\"S\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "      <constant decay=\"5.533350e+00\">" << endl;
  basisfile << "        <contractions factor=\"7.007130e-01\" type=\"S\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"SP\">" << endl;
  basisfile << "      <constant decay=\"3.664980e+00\">" << endl;
  basisfile << "        <contractions factor=\"-3.958970e-01\" type=\"S\"/>" << endl;
  basisfile << "        <contractions factor=\"2.364600e-01\" type=\"P\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "      <constant decay=\"7.705450e-01\">" << endl;
  basisfile << "        <contractions factor=\"1.215840e+00\" type=\"S\"/>" << endl;
  basisfile << "        <contractions factor=\"8.606190e-01\" type=\"P\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"SP\">" << endl;
  basisfile << "      <constant decay=\"1.958570e-01\">" << endl;
  basisfile << "        <contractions factor=\"1.000000e+00\" type=\"S\"/>" << endl;
  basisfile << "        <contractions factor=\"1.000000e+00\" type=\"P\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "  </element>" << endl;
  basisfile << "</basis>" << endl;
  basisfile.close();

  Orbitals orbitals;
  orbitals.LoadFromXYZ("molecule.xyz");
  BasisSet basis;
  basis.LoadBasisSet("3-21G.xml");

  AOBasis aobasis;
  aobasis.AOBasisFill(basis, orbitals.QMAtoms());

  Eigen::MatrixXd MOs = Eigen::MatrixXd::Zero(17, 17);
  MOs << -0.00761992, -4.69664e-13, 8.35009e-15, -1.15214e-14, -0.0156169, -2.23157e-12, 1.52916e-14, 2.10997e-15, 8.21478e-15, 3.18517e-15, 2.89043e-13, -0.00949189, 1.95787e-12, 1.22168e-14, -2.63092e-15, -0.22227, 1.00844,
          0.233602, -3.18103e-12, 4.05093e-14, -4.70943e-14, 0.1578, 4.75897e-11, -1.87447e-13, -1.02418e-14, 6.44484e-14, -2.6602e-14, 6.5906e-12, -0.281033, -6.67755e-12, 2.70339e-14, -9.78783e-14, -1.94373, -0.36629,
          -1.63678e-13, -0.22745, -0.054851, 0.30351, 3.78688e-11, -0.201627, -0.158318, -0.233561, -0.0509347, -0.650424, 0.452606, -5.88565e-11, 0.453936, -0.165715, -0.619056, 7.0149e-12, 2.395e-14,
          -4.51653e-14, -0.216509, 0.296975, -0.108582, 3.79159e-11, -0.199301, 0.283114, -0.0198557, 0.584622, 0.275311, 0.461431, -5.93732e-11, 0.453057, 0.619523, 0.166374, 7.13235e-12, 2.56811e-14,
          -9.0903e-14, -0.21966, -0.235919, -0.207249, 3.75979e-11, -0.199736, -0.122681, 0.255585, -0.534902, 0.362837, 0.461224, -5.91028e-11, 0.453245, -0.453298, 0.453695, 7.01644e-12, 2.60987e-14,
          0.480866, 1.8992e-11, -2.56795e-13, 4.14571e-13, 2.2709, 4.78615e-10, -2.39153e-12, -2.53852e-13, -2.15605e-13, -2.80359e-13, 7.00137e-12, 0.145171, -1.96136e-11, -2.24876e-13, -2.57294e-14, 4.04176, 0.193617,
          -1.64421e-12, -0.182159, -0.0439288, 0.243073, 1.80753e-10, -0.764779, -0.600505, -0.885907, 0.0862014, 1.10077, -0.765985, 6.65828e-11, -0.579266, 0.211468, 0.789976, -1.41532e-11, -1.29659e-13,
          -1.64105e-12, -0.173397, 0.23784, -0.0869607, 1.80537e-10, -0.755957, 1.07386, -0.0753135, -0.989408, -0.465933, -0.78092, 6.72256e-11, -0.578145, -0.790571, -0.212309, -1.42443e-11, -1.31306e-13,
          -1.63849e-12, -0.17592, -0.188941, -0.165981, 1.79403e-10, -0.757606, -0.465334, 0.969444, 0.905262, -0.61406, -0.78057, 6.69453e-11, -0.578385, 0.578453, -0.578959, -1.40917e-11, -1.31002e-13,
          0.129798, -0.274485, 0.00256652, -0.00509635, -0.0118465, 0.141392, -0.000497905, -0.000510338, -0.000526798, -0.00532572, 0.596595, 0.65313, -0.964582, -0.000361559, -0.000717866, -0.195084, 0.0246232,
          0.0541331, -0.255228, 0.00238646, -0.0047388, -0.88576, 1.68364, -0.00592888, -0.00607692, -9.5047e-05, -0.000960887, 0.10764, -0.362701, 1.53456, 0.000575205, 0.00114206, -0.793844, -0.035336,
          0.129798, 0.0863299, -0.0479412, 0.25617, -0.0118465, -0.0464689, 0.0750316, 0.110468, -0.0436647, -0.558989, -0.203909, 0.65313, 0.320785, 0.235387, 0.878697, -0.195084, 0.0246232,
          0.0541331, 0.0802732, -0.0445777, 0.238198, -0.88576, -0.553335, 0.893449, 1.31541, -0.00787816, -0.100855, -0.0367902, -0.362701, -0.510338, -0.374479, -1.39792, -0.793844, -0.035336,
          0.129798, 0.0927742, -0.197727, -0.166347, -0.0118465, -0.0473592, 0.0582544, -0.119815, -0.463559, 0.320126, -0.196433, 0.65313, 0.321765, 0.643254, -0.642737, -0.195084, 0.0246232,
          0.0541331, 0.0862654, -0.183855, -0.154677, -0.88576, -0.563936, 0.693672, -1.42672, -0.0836372, 0.0577585, -0.0354411, -0.362701, -0.511897, -1.02335, 1.02253, -0.793844, -0.035336,
          0.129798, 0.0953806, 0.243102, -0.0847266, -0.0118465, -0.0475639, -0.132788, 0.00985812, 0.507751, 0.244188, -0.196253, 0.65313, 0.322032, -0.87828, -0.235242, -0.195084, 0.0246232,
          0.0541331, 0.088689, 0.226046, -0.0787824, -0.88576, -0.566373, -1.58119, 0.117387, 0.0916104, 0.0440574, -0.0354087, -0.362701, -0.512321, 1.39726, 0.374248, -0.793844, -0.035336;

  Eigen::VectorXd mo_energy = Eigen::VectorXd::Zero(17);
  mo_energy << -0.612601, -0.341755, -0.341755, -0.341755, 0.137304, 0.16678, 0.16678, 0.16678, 0.671592, 0.671592, 0.671592, 0.974255, 1.01205, 1.01205, 1.01205, 1.64823, 19.4429;
  TCMatrix_gwbse Mmn;
  Mmn.Initialize(aobasis.AOBasisSize(), 0, 16, 0, 16);
  Mmn.Fill(aobasis, aobasis, MOs);

  votca::ctp::Logger log;
  RPA rpa(log, Mmn);
  rpa.configure(4, 0, 16);
  rpa.setRPAInputEnergies(mo_energy);

  Sigma_Spectral sigma = Sigma_Spectral(Mmn, rpa);
  sigma.configure(4, 0, 16);

  Eigen::MatrixXd x = sigma.CalcExchange();

  Eigen::MatrixXd x_ref = Eigen::MatrixXd::Zero(17, 17);
  x_ref << -0.898354, 5.71768e-07, -1.37292e-08, 1.98142e-07, -0.149915, 2.16108e-06, -1.16525e-06, -3.17829e-07, -1.88839e-07, 2.21419e-07, -2.98344e-08, -0.0269881, -2.13239e-06, -3.09447e-06, -4.98945e-08, 0.11249, -0.00337645,
          5.71768e-07, -0.690315, 4.39806e-07, -3.6005e-07, -5.82737e-08, -0.0266566, -0.000334105, -0.000256846, -0.00109173, -0.00375978, 0.132508, 1.1112e-07, -0.0402288, 0.000418149, 0.000685308, -1.62313e-08, 4.06964e-09,
          -1.37292e-08, 4.39806e-07, -0.690316, 1.49062e-07, 5.35669e-09, 0.000201816, -0.0244124, 0.0107079, -0.13183, -0.0138696, -0.00147968, -1.15888e-07, 0.000363237, 0.0401121, -0.00316551, 7.90554e-09, 3.08003e-09,
          1.98142e-07, -3.6005e-07, 1.49062e-07, -0.690315, -1.48218e-08, -0.000368948, 0.0107048, 0.0244113, -0.0139054, 0.131785, 0.00362461, 3.26075e-08, -0.000716146, -0.00315591, -0.0401082, -7.83667e-09, 1.75034e-09,
          -0.149915, -5.82737e-08, 5.35669e-09, -1.48218e-08, -0.419561, 2.94693e-08, 1.4477e-08, 2.02462e-10, 1.3573e-08, -1.31684e-08, 7.55841e-10, 0.111589, -1.43489e-08, 1.23778e-08, -9.2956e-09, 0.101203, -0.00966821,
          2.16108e-06, -0.0266566, 0.000201816, -0.000368948, 2.94693e-08, -0.162521, -2.50885e-08, 2.37541e-08, -6.18131e-05, -0.000396018, 0.0286842, 7.29432e-08, 0.0853922, -0.000150722, -0.000326281, -1.86634e-07, -1.08635e-09,
          -1.16525e-06, -0.000334105, -0.0244124, 0.0107048, 1.4477e-08, -2.50885e-08, -0.162521, -6.437e-08, -0.0249187, -0.01421, -0.000249755, -3.68182e-08, -0.000249614, -0.0806557, -0.0280463, 8.95564e-08, 1.72272e-09,
          -3.17829e-07, -0.000256846, 0.0107079, 0.0244113, 2.02462e-10, 2.37541e-08, -6.437e-08, -0.162521, 0.0142121, -0.0249168, -0.000313469, -4.22882e-08, -0.00025868, 0.0280471, -0.0806557, 1.90873e-08, 8.04122e-10,
          -1.88839e-07, -0.00109173, -0.13183, -0.0139054, 1.3573e-08, -6.18131e-05, -0.0249187, 0.0142121, -0.112664, 5.15694e-09, 2.67503e-08, -6.82025e-08, -3.58992e-06, 0.00311123, -0.000577989, 1.57751e-08, 2.46073e-09,
          2.21419e-07, -0.00375978, -0.0138696, 0.131785, -1.31684e-08, -0.000396018, -0.01421, -0.0249168, 5.15694e-09, -0.112664, -3.26454e-09, 2.92286e-08, -3.07662e-05, 0.000577593, 0.00311108, -4.33364e-09, -2.83729e-09,
          -2.98344e-08, 0.132508, -0.00147968, 0.00362461, 7.55841e-10, 0.0286842, -0.000249755, -0.000313469, 2.67503e-08, -3.26454e-09, -0.112664, -2.55154e-08, 0.00316414, 9.12634e-06, 2.94706e-05, 6.29731e-09, -3.74354e-09,
          -0.0269881, 1.1112e-07, -1.15888e-07, 3.26075e-08, 0.111589, 7.29432e-08, -3.68182e-08, -4.22882e-08, -6.82025e-08, 2.92286e-08, -2.55154e-08, -0.17259, -5.78498e-08, -9.45104e-08, 2.34917e-08, -0.0427377, 0.00896338,
          -2.13239e-06, -0.0402288, 0.000363237, -0.000716146, -1.43489e-08, 0.0853922, -0.000249614, -0.00025868, -3.58992e-06, -3.07662e-05, 0.00316414, -5.78498e-08, -0.131712, -1.06678e-08, 2.79713e-08, 1.92221e-07, -7.78508e-10,
          -3.09447e-06, 0.000418149, 0.0401121, -0.00315591, 1.23778e-08, -0.000150722, -0.0806557, 0.0280471, 0.00311123, 0.000577593, 9.12634e-06, -9.45104e-08, -1.06678e-08, -0.131712, 2.65503e-07, 2.62621e-07, 2.69838e-10,
          -4.98945e-08, 0.000685308, -0.00316551, -0.0401082, -9.2956e-09, -0.000326281, -0.0280463, -0.0806557, -0.000577989, 0.00311108, 2.94706e-05, 2.34917e-08, 2.79713e-08, 2.65503e-07, -0.131712, 5.71293e-09, -9.80113e-10,
          0.11249, -1.62313e-08, 7.90554e-09, -7.83667e-09, 0.101203, -1.86634e-07, 8.95564e-08, 1.90873e-08, 1.57751e-08, -4.33364e-09, 6.29731e-09, -0.0427377, 1.92221e-07, 2.62621e-07, 5.71293e-09, -0.10267, 0.0171175,
          -0.00337645, 4.06964e-09, 3.08003e-09, 1.75034e-09, -0.00966821, -1.08635e-09, 1.72272e-09, 8.04122e-10, 2.46073e-09, -2.83729e-09, -3.74354e-09, 0.00896338, -7.78508e-10, 2.69838e-10, -9.80113e-10, 0.0171175, -0.0285864;

  bool check_x = x_ref.isApprox(x, 1e-5);
  if (!check_x) {
    cout << "Sigma X" << endl;
    cout << x << endl;
    cout << "Sigma X ref" << endl;
    cout << x_ref << endl;
  }
  BOOST_CHECK_EQUAL(check_x, true);

  sigma.PrepareScreening();
  sigma.set_HedinApprox(false);
  
  Eigen::VectorXd c_diag = sigma.CalcCorrelationDiag(mo_energy);
  Eigen::MatrixXd c_off = sigma.CalcCorrelationOffDiag(mo_energy);

  c_off.diagonal() = c_diag;
  Eigen::MatrixXd c_ref = Eigen::MatrixXd::Zero(17, 17);
  c_ref << 0.555029, 3.97309e-06, -2.65625e-06, 1.15824e-06, 0.202844, 1.23916e-06, -1.00426e-06, 6.38809e-08, -1.57832e-06, -9.61311e-07, -2.60789e-06, -0.0743869, -3.40588e-06, -1.95485e-06, -8.07519e-07, 0.00478883, 0.0207573,
          3.97309e-06, 0.287146, 1.27342e-07, -4.21373e-08, 4.69209e-07, 0.0183849, 0.000229681, 0.000177219, 4.28893e-05, 0.000147343, -0.0051902, -1.02734e-06, -0.160829, 0.00167333, 0.00273876, 6.05348e-08, 3.08198e-09,
          -2.65625e-06, 1.27342e-07, 0.287146, -1.96828e-07, -3.54012e-07, -0.000139436, 0.0168386, -0.00738594, 0.00516328, 0.000543317, 5.7825e-05, 8.67132e-07, 0.00145341, 0.160356, -0.012652, -4.71987e-08, -5.66913e-09,
          1.15824e-06, -4.21373e-08, -1.96828e-07, 0.287144, 1.43538e-07, 0.000254636, -0.00738352, -0.0168382, 0.000544521, -0.00516106, -0.000141857, -2.73143e-07, -0.00286197, -0.0126246, -0.16034, 2.42561e-07, 2.8915e-09,
          0.202844, 4.69209e-07, -3.54012e-07, 1.43538e-07, -0.0123235, -4.62168e-07, 2.65746e-07, 6.75893e-08, -2.71605e-07, -7.32685e-08, -2.88947e-07, 0.00665341, -8.02897e-07, -4.25215e-07, -2.65061e-07, 0.0794692, 0.0132161,
          1.23916e-06, 0.0183849, -0.000139436, 0.000254636, -4.62168e-07, -0.0795701, -2.50636e-07, 3.82427e-08, -9.95109e-05, -0.000636451, 0.0460958, -1.64911e-07, 0.0538339, -9.51295e-05, -0.000205962, 1.38633e-07, -2.75152e-08,
          -1.00426e-06, 0.000229681, 0.0168386, -0.00738352, 2.65746e-07, -2.50636e-07, -0.0795694, -7.7534e-08, -0.0400442, -0.0228354, -0.000401341, 1.05889e-07, -0.000157291, -0.0508472, -0.0176808, 2.34627e-08, 1.41792e-08,
          6.38809e-08, 0.000177219, -0.00738594, -0.0168382, 6.75893e-08, 3.82427e-08, -7.7534e-08, -0.0795694, 0.0228384, -0.0400409, -0.000503718, 1.23932e-07, -0.000162933, 0.0176812, -0.0508463, -8.23609e-08, 5.05059e-09,
          -1.57832e-06, 4.28893e-05, 0.00516328, 0.000544521, -2.71605e-07, -9.95109e-05, -0.0400442, 0.0228384, -0.211767, 1.34194e-07, 3.83541e-08, 8.31602e-07, -0.000150032, 0.132324, -0.0245799, 2.35056e-07, -2.10387e-08,
          -9.61311e-07, 0.000147343, 0.000543317, -0.00516106, -7.32685e-08, -0.000636451, -0.0228354, -0.0400409, 1.34194e-07, -0.211768, -1.81002e-07, 3.70012e-07, -0.00130894, 0.0245768, 0.132318, 5.50737e-08, -9.71127e-09,
          -2.60789e-06, -0.0051902, 5.7825e-05, -0.000141857, -2.88947e-07, 0.0460958, -0.000401341, -0.000503718, 3.83541e-08, -1.81002e-07, -0.211767, 1.11705e-06, 0.13458, 0.000386939, 0.00125958, 5.0499e-07, -2.20727e-08,
          -0.0743869, -1.02734e-06, 8.67132e-07, -2.73143e-07, 0.00665341, -1.64911e-07, 1.05889e-07, 1.23932e-07, 8.31602e-07, 3.70012e-07, 1.11705e-06, -0.289206, 3.75722e-07, 5.91735e-07, 2.87462e-07, 0.0330784, 0.00625577,
          -3.40588e-06, -0.160829, 0.00145341, -0.00286197, -8.02897e-07, 0.0538339, -0.000157291, -0.000162933, -0.000150032, -0.00130894, 0.13458, 3.75722e-07, -0.330262, 7.51635e-07, 7.82954e-07, 1.10298e-06, -3.89178e-07,
          -1.95485e-06, 0.00167333, 0.160356, -0.0126246, -4.25215e-07, -9.51295e-05, -0.0508472, 0.0176812, 0.132324, 0.0245768, 0.000386939, 5.91735e-07, 7.51635e-07, -0.330261, -2.4355e-07, 9.39279e-07, -2.89449e-07,
          -8.07519e-07, 0.00273876, -0.012652, -0.16034, -2.65061e-07, -0.000205962, -0.0176808, -0.0508463, -0.0245799, 0.132318, 0.00125958, 2.87462e-07, 7.82954e-07, -2.4355e-07, -0.330257, 4.77007e-07, -7.17093e-08,
          0.00478883, 6.05348e-08, -4.71987e-08, 2.42561e-07, 0.0794692, 1.38633e-07, 2.34627e-08, -8.23609e-08, 2.35056e-07, 5.50737e-08, 5.0499e-07, 0.0330784, 1.10298e-06, 9.39279e-07, 4.77007e-07, -0.438923, 0.0117703,
          0.0207573, 3.08198e-09, -5.66913e-09, 2.8915e-09, 0.0132161, -2.75152e-08, 1.41792e-08, 5.05059e-09, -2.10387e-08, -9.71127e-09, -2.20727e-08, 0.00625577, -3.89178e-07, -2.89449e-07, -7.17093e-08, 0.0117703, 2.42299e-06;

  bool check_c_diag = c_diag.isApprox(c_ref.diagonal(), 1e-5);
  if (!check_c_diag) {
    cout << "Sigma C" << endl;
    cout << c_diag << endl;
    cout << "Sigma C ref" << endl;
    cout << c_ref.diagonal() << endl;
  }
  BOOST_CHECK_EQUAL(check_c_diag, true);

  bool check_c = c_ref.isApprox(c_off, 1e-5);
  if (!check_c) {
    cout << "Sigma C" << endl;
    cout << c_off << endl;
    cout << "Sigma C ref" << endl;
    cout << c_ref << endl;
  }
  BOOST_CHECK_EQUAL(check_c, true);
  
  sigma.set_HedinApprox(true);

  Eigen::VectorXd c_diag_Hedin = sigma.CalcCorrelationDiag(mo_energy);
  Eigen::MatrixXd c_off_Hedin = sigma.CalcCorrelationOffDiag(mo_energy);

  c_off_Hedin.diagonal() = c_diag_Hedin;
  Eigen::MatrixXd c_ref_Hedin = Eigen::MatrixXd::Zero(17, 17);
  c_ref_Hedin << 0.6976, -1.90697e-06, 8.3972e-07, -7.05655e-07, 0.159277, -2.64652e-06, 1.40093e-06, 3.84132e-07, 2.56643e-07, 5.58929e-08, 7.01802e-07, -0.072678, 2.75202e-07, 9.47717e-07, -3.54132e-09, -0.0956033, 0.0208949,
          -1.90697e-06, 0.10465, 6.40043e-07, -1.90955e-07, 5.99798e-07, -0.0640343, -0.00080043, -0.000617005, -0.000762941, -0.00262878, 0.0926488, -1.56257e-06, 0.101765, -0.00105929, -0.00173292, 2.66408e-07, -1.45828e-07,
          8.3972e-07, 6.40043e-07, 0.104648, -4.56805e-07, -6.27302e-07, 0.000484741, -0.0586458, 0.0257234, -0.0921755, -0.00969737, -0.00103494, 1.39155e-06, -0.00091913, -0.101465, 0.00800515, 2.17796e-08, 4.79349e-08,
          -7.05655e-07, -1.90955e-07, -4.56805e-07, 0.104645, 1.27393e-07, -0.000886483, 0.0257162, 0.0586446, -0.0097231, 0.0921452, 0.00253482, -3.13514e-07, 0.00181083, 0.00798827, 0.101454, 1.89291e-07, -4.58279e-08,
          0.159277, 5.99798e-07, -6.27302e-07, 1.27393e-07, -0.0961711, -2.69557e-07, -2.06874e-08, 1.57629e-07, -8.00249e-07, -3.23829e-07, -1.03289e-06, -0.00686217, -1.69395e-06, -8.66132e-07, -4.90426e-07, 0.0529851, 0.0150006,
          -2.64652e-06, -0.0640343, 0.000484741, -0.000886483, -2.69557e-07, -0.0597383, -6.02913e-07, 7.08677e-08, -0.000236286, -0.0015125, 0.109549, -2.41035e-07, 0.147963, -0.000261864, -0.000565547, 3.82152e-07, -1.11311e-09,
          1.40093e-06, -0.00080043, -0.0586458, 0.0257162, -2.06874e-08, -6.02913e-07, -0.0597363, -1.07916e-07, -0.0951682, -0.0542702, -0.000954168, 1.59354e-07, -0.000431958, -0.139753, -0.0485962, -1.73075e-07, -4.72079e-08,
          3.84132e-07, -0.000617005, 0.0257234, 0.0586446, 1.57629e-07, 7.08677e-08, -1.07916e-07, -0.059735, 0.0542775, -0.095161, -0.00119715, 3.85815e-08, -0.000448228, 0.0485967, -0.139752, -3.11861e-08, 3.53171e-08,
          2.56643e-07, -0.000762941, -0.0921755, -0.0097231, -8.00249e-07, -0.000236286, -0.0951682, 0.0542775, -0.280792, 3.89303e-07, -1.81915e-07, 9.01388e-07, 0.000182705, -0.160745, 0.0298587, 5.34921e-07, -3.70538e-08,
          5.58929e-08, -0.00262878, -0.00969737, 0.0921452, -3.23829e-07, -0.0015125, -0.0542702, -0.095161, 3.89303e-07, -0.280794, -4.10924e-07, 3.93606e-07, 0.00159015, -0.0298561, -0.160738, 3.15618e-07, 4.41526e-09,
          7.01802e-07, 0.0926488, -0.00103494, 0.00253482, -1.03289e-06, 0.109549, -0.000954168, -0.00119715, -1.81915e-07, -4.10924e-07, -0.280792, 1.35045e-06, -0.163489, -0.000469454, -0.00153052, 6.96116e-07, 2.90961e-08,
          -0.072678, -1.56257e-06, 1.39155e-06, -3.13514e-07, -0.00686217, -2.41035e-07, 1.59354e-07, 3.85815e-08, 9.01388e-07, 3.93606e-07, 1.35045e-06, -0.332, 5.16382e-07, 4.45704e-07, 2.74415e-07, -0.0371793, -0.00762417,
          2.75202e-07, 0.101765, -0.00091913, 0.00181083, -1.69395e-06, 0.147963, -0.000431958, -0.000448228, 0.000182705, 0.00159015, -0.163489, 5.16382e-07, -0.49088, 2.50715e-09, 2.94488e-08, 1.26962e-06, -4.12467e-07,
          9.47717e-07, -0.00105929, -0.101465, 0.00798827, -8.66132e-07, -0.000261864, -0.139753, 0.0485967, -0.160745, -0.0298561, -0.000469454, 4.45704e-07, 2.50715e-09, -0.490879, -2.46862e-07, 6.61153e-07, -2.97409e-07,
          -3.54132e-09, -0.00173292, 0.00800515, 0.101454, -4.90426e-07, -0.000565547, -0.0485962, -0.139752, 0.0298587, -0.160738, -0.00153052, 2.74415e-07, 2.94488e-08, -2.46862e-07, -0.49088, 3.78357e-07, -7.10354e-08,
          -0.0956033, 2.66408e-07, 2.17796e-08, 1.89291e-07, 0.0529851, 3.82152e-07, -1.73075e-07, -3.11861e-08, 5.34921e-07, 3.15618e-07, 6.96116e-07, -0.0371793, 1.26962e-06, 6.61153e-07, 3.78357e-07, -0.303161, 0.0131185,
          0.0208949, -1.45828e-07, 4.79349e-08, -4.58279e-08, 0.0150006, -1.11311e-09, -4.72079e-08, 3.53171e-08, -3.70538e-08, 4.41526e-09, 2.90961e-08, -0.00762417, -4.12467e-07, -2.97409e-07, -7.10354e-08, 0.0131185, -0.00087307;

  bool check_c_diag_Hedin = c_diag_Hedin.isApprox(c_ref_Hedin.diagonal(), 1e-5);
  if (!check_c_diag_Hedin) {
    cout << "Sigma C" << endl;
    cout << c_diag_Hedin << endl;
    cout << "Sigma C ref" << endl;
    cout << c_ref_Hedin.diagonal() << endl;
  }
  BOOST_CHECK_EQUAL(check_c_diag_Hedin, true);

  bool check_c_Hedin = c_ref_Hedin.isApprox(c_off_Hedin, 1e-5);
  if (!check_c_Hedin) {
    cout << "Sigma C" << endl;
    cout << c_off_Hedin << endl;
    cout << "Sigma C ref" << endl;
    cout << c_ref_Hedin << endl;
  }
  BOOST_CHECK_EQUAL(check_c_Hedin, true);

}

BOOST_AUTO_TEST_SUITE_END()
