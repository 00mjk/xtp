/*
 * Copyright 2009-2018 The VOTCA Development Team (http://www.votca.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
#define BOOST_TEST_MAIN

#define BOOST_TEST_MODULE sigma_test
#include <boost/test/unit_test.hpp>
#include <votca/xtp/sigma_spectral.h>
#include <fstream> 
#include <votca/xtp/orbitals.h>
#include <votca/xtp/aobasis.h>
#include <votca/xtp/threecenter.h>
#include <votca/xtp/rpa.h>

using namespace votca::xtp;
using namespace std;

BOOST_AUTO_TEST_SUITE(sigma_test)

BOOST_AUTO_TEST_CASE(sigma_full) {

  ofstream xyzfile("molecule.xyz");
  xyzfile << " 5" << endl;
  xyzfile << " methane" << endl;
  xyzfile << " C            .000000     .000000     .000000" << endl;
  xyzfile << " H            .629118     .629118     .629118" << endl;
  xyzfile << " H           -.629118    -.629118     .629118" << endl;
  xyzfile << " H            .629118    -.629118    -.629118" << endl;
  xyzfile << " H           -.629118     .629118    -.629118" << endl;
  xyzfile.close();

  ofstream basisfile("3-21G.xml");
  basisfile << "<basis name=\"3-21G\">" << endl;
  basisfile << "  <element name=\"H\">" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"S\">" << endl;
  basisfile << "      <constant decay=\"5.447178e+00\">" << endl;
  basisfile << "        <contractions factor=\"1.562850e-01\" type=\"S\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "      <constant decay=\"8.245470e-01\">" << endl;
  basisfile << "        <contractions factor=\"9.046910e-01\" type=\"S\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"S\">" << endl;
  basisfile << "      <constant decay=\"1.831920e-01\">" << endl;
  basisfile << "        <contractions factor=\"1.000000e+00\" type=\"S\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "  </element>" << endl;
  basisfile << "  <element name=\"C\">" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"S\">" << endl;
  basisfile << "      <constant decay=\"1.722560e+02\">" << endl;
  basisfile << "        <contractions factor=\"6.176690e-02\" type=\"S\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "      <constant decay=\"2.591090e+01\">" << endl;
  basisfile << "        <contractions factor=\"3.587940e-01\" type=\"S\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "      <constant decay=\"5.533350e+00\">" << endl;
  basisfile << "        <contractions factor=\"7.007130e-01\" type=\"S\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"SP\">" << endl;
  basisfile << "      <constant decay=\"3.664980e+00\">" << endl;
  basisfile << "        <contractions factor=\"-3.958970e-01\" type=\"S\"/>" << endl;
  basisfile << "        <contractions factor=\"2.364600e-01\" type=\"P\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "      <constant decay=\"7.705450e-01\">" << endl;
  basisfile << "        <contractions factor=\"1.215840e+00\" type=\"S\"/>" << endl;
  basisfile << "        <contractions factor=\"8.606190e-01\" type=\"P\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"SP\">" << endl;
  basisfile << "      <constant decay=\"1.958570e-01\">" << endl;
  basisfile << "        <contractions factor=\"1.000000e+00\" type=\"S\"/>" << endl;
  basisfile << "        <contractions factor=\"1.000000e+00\" type=\"P\"/>" << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "  </element>" << endl;
  basisfile << "</basis>" << endl;
  basisfile.close();

  Orbitals orbitals;
  orbitals.LoadFromXYZ("molecule.xyz");
  BasisSet basis;
  basis.LoadBasisSet("3-21G.xml");

  AOBasis aobasis;
  aobasis.AOBasisFill(basis, orbitals.QMAtoms());

  Eigen::MatrixXd MOs = Eigen::MatrixXd::Zero(17, 17);
  MOs << -0.00761992, -4.69664e-13, 8.35009e-15, -1.15214e-14, -0.0156169, -2.23157e-12, 1.52916e-14, 2.10997e-15, 8.21478e-15, 3.18517e-15, 2.89043e-13, -0.00949189, 1.95787e-12, 1.22168e-14, -2.63092e-15, -0.22227, 1.00844,
          0.233602, -3.18103e-12, 4.05093e-14, -4.70943e-14, 0.1578, 4.75897e-11, -1.87447e-13, -1.02418e-14, 6.44484e-14, -2.6602e-14, 6.5906e-12, -0.281033, -6.67755e-12, 2.70339e-14, -9.78783e-14, -1.94373, -0.36629,
          -1.63678e-13, -0.22745, -0.054851, 0.30351, 3.78688e-11, -0.201627, -0.158318, -0.233561, -0.0509347, -0.650424, 0.452606, -5.88565e-11, 0.453936, -0.165715, -0.619056, 7.0149e-12, 2.395e-14,
          -4.51653e-14, -0.216509, 0.296975, -0.108582, 3.79159e-11, -0.199301, 0.283114, -0.0198557, 0.584622, 0.275311, 0.461431, -5.93732e-11, 0.453057, 0.619523, 0.166374, 7.13235e-12, 2.56811e-14,
          -9.0903e-14, -0.21966, -0.235919, -0.207249, 3.75979e-11, -0.199736, -0.122681, 0.255585, -0.534902, 0.362837, 0.461224, -5.91028e-11, 0.453245, -0.453298, 0.453695, 7.01644e-12, 2.60987e-14,
          0.480866, 1.8992e-11, -2.56795e-13, 4.14571e-13, 2.2709, 4.78615e-10, -2.39153e-12, -2.53852e-13, -2.15605e-13, -2.80359e-13, 7.00137e-12, 0.145171, -1.96136e-11, -2.24876e-13, -2.57294e-14, 4.04176, 0.193617,
          -1.64421e-12, -0.182159, -0.0439288, 0.243073, 1.80753e-10, -0.764779, -0.600505, -0.885907, 0.0862014, 1.10077, -0.765985, 6.65828e-11, -0.579266, 0.211468, 0.789976, -1.41532e-11, -1.29659e-13,
          -1.64105e-12, -0.173397, 0.23784, -0.0869607, 1.80537e-10, -0.755957, 1.07386, -0.0753135, -0.989408, -0.465933, -0.78092, 6.72256e-11, -0.578145, -0.790571, -0.212309, -1.42443e-11, -1.31306e-13,
          -1.63849e-12, -0.17592, -0.188941, -0.165981, 1.79403e-10, -0.757606, -0.465334, 0.969444, 0.905262, -0.61406, -0.78057, 6.69453e-11, -0.578385, 0.578453, -0.578959, -1.40917e-11, -1.31002e-13,
          0.129798, -0.274485, 0.00256652, -0.00509635, -0.0118465, 0.141392, -0.000497905, -0.000510338, -0.000526798, -0.00532572, 0.596595, 0.65313, -0.964582, -0.000361559, -0.000717866, -0.195084, 0.0246232,
          0.0541331, -0.255228, 0.00238646, -0.0047388, -0.88576, 1.68364, -0.00592888, -0.00607692, -9.5047e-05, -0.000960887, 0.10764, -0.362701, 1.53456, 0.000575205, 0.00114206, -0.793844, -0.035336,
          0.129798, 0.0863299, -0.0479412, 0.25617, -0.0118465, -0.0464689, 0.0750316, 0.110468, -0.0436647, -0.558989, -0.203909, 0.65313, 0.320785, 0.235387, 0.878697, -0.195084, 0.0246232,
          0.0541331, 0.0802732, -0.0445777, 0.238198, -0.88576, -0.553335, 0.893449, 1.31541, -0.00787816, -0.100855, -0.0367902, -0.362701, -0.510338, -0.374479, -1.39792, -0.793844, -0.035336,
          0.129798, 0.0927742, -0.197727, -0.166347, -0.0118465, -0.0473592, 0.0582544, -0.119815, -0.463559, 0.320126, -0.196433, 0.65313, 0.321765, 0.643254, -0.642737, -0.195084, 0.0246232,
          0.0541331, 0.0862654, -0.183855, -0.154677, -0.88576, -0.563936, 0.693672, -1.42672, -0.0836372, 0.0577585, -0.0354411, -0.362701, -0.511897, -1.02335, 1.02253, -0.793844, -0.035336,
          0.129798, 0.0953806, 0.243102, -0.0847266, -0.0118465, -0.0475639, -0.132788, 0.00985812, 0.507751, 0.244188, -0.196253, 0.65313, 0.322032, -0.87828, -0.235242, -0.195084, 0.0246232,
          0.0541331, 0.088689, 0.226046, -0.0787824, -0.88576, -0.566373, -1.58119, 0.117387, 0.0916104, 0.0440574, -0.0354087, -0.362701, -0.512321, 1.39726, 0.374248, -0.793844, -0.035336;

  Eigen::VectorXd mo_energy = Eigen::VectorXd::Zero(17);
  mo_energy << -0.612601, -0.341755, -0.341755, -0.341755, 0.137304, 0.16678, 0.16678, 0.16678, 0.671592, 0.671592, 0.671592, 0.974255, 1.01205, 1.01205, 1.01205, 1.64823, 19.4429;
  TCMatrix_gwbse Mmn;
  Mmn.Initialize(aobasis.AOBasisSize(), 0, 16, 0, 16);
  Mmn.Fill(aobasis, aobasis, MOs);

  votca::ctp::Logger log;
  RPA rpa(log, Mmn);
  rpa.configure(4, 0, 16);
  rpa.setRPAInputEnergies(mo_energy);

  Sigma_Spectral sigma = Sigma_Spectral(Mmn, rpa);
  
  Sigma_Spectral::options opt;
  opt.homo=4;
  opt.qpmin=0;
  opt.qpmax=16;
  opt.rpamin=0;
  sigma.configure(opt);

  Eigen::MatrixXd x = sigma.CalcExchange();

  Eigen::MatrixXd x_ref = Eigen::MatrixXd::Zero(17, 17);
  x_ref << -0.898354, 5.71768e-07, -1.37292e-08, 1.98142e-07, -0.149915, 2.16108e-06, -1.16525e-06, -3.17829e-07, -1.88839e-07, 2.21419e-07, -2.98344e-08, -0.0269881, -2.13239e-06, -3.09447e-06, -4.98945e-08, 0.11249, -0.00337645,
          5.71768e-07, -0.690315, 4.39806e-07, -3.6005e-07, -5.82737e-08, -0.0266566, -0.000334105, -0.000256846, -0.00109173, -0.00375978, 0.132508, 1.1112e-07, -0.0402288, 0.000418149, 0.000685308, -1.62313e-08, 4.06964e-09,
          -1.37292e-08, 4.39806e-07, -0.690316, 1.49062e-07, 5.35669e-09, 0.000201816, -0.0244124, 0.0107079, -0.13183, -0.0138696, -0.00147968, -1.15888e-07, 0.000363237, 0.0401121, -0.00316551, 7.90554e-09, 3.08003e-09,
          1.98142e-07, -3.6005e-07, 1.49062e-07, -0.690315, -1.48218e-08, -0.000368948, 0.0107048, 0.0244113, -0.0139054, 0.131785, 0.00362461, 3.26075e-08, -0.000716146, -0.00315591, -0.0401082, -7.83667e-09, 1.75034e-09,
          -0.149915, -5.82737e-08, 5.35669e-09, -1.48218e-08, -0.419561, 2.94693e-08, 1.4477e-08, 2.02462e-10, 1.3573e-08, -1.31684e-08, 7.55841e-10, 0.111589, -1.43489e-08, 1.23778e-08, -9.2956e-09, 0.101203, -0.00966821,
          2.16108e-06, -0.0266566, 0.000201816, -0.000368948, 2.94693e-08, -0.162521, -2.50885e-08, 2.37541e-08, -6.18131e-05, -0.000396018, 0.0286842, 7.29432e-08, 0.0853922, -0.000150722, -0.000326281, -1.86634e-07, -1.08635e-09,
          -1.16525e-06, -0.000334105, -0.0244124, 0.0107048, 1.4477e-08, -2.50885e-08, -0.162521, -6.437e-08, -0.0249187, -0.01421, -0.000249755, -3.68182e-08, -0.000249614, -0.0806557, -0.0280463, 8.95564e-08, 1.72272e-09,
          -3.17829e-07, -0.000256846, 0.0107079, 0.0244113, 2.02462e-10, 2.37541e-08, -6.437e-08, -0.162521, 0.0142121, -0.0249168, -0.000313469, -4.22882e-08, -0.00025868, 0.0280471, -0.0806557, 1.90873e-08, 8.04122e-10,
          -1.88839e-07, -0.00109173, -0.13183, -0.0139054, 1.3573e-08, -6.18131e-05, -0.0249187, 0.0142121, -0.112664, 5.15694e-09, 2.67503e-08, -6.82025e-08, -3.58992e-06, 0.00311123, -0.000577989, 1.57751e-08, 2.46073e-09,
          2.21419e-07, -0.00375978, -0.0138696, 0.131785, -1.31684e-08, -0.000396018, -0.01421, -0.0249168, 5.15694e-09, -0.112664, -3.26454e-09, 2.92286e-08, -3.07662e-05, 0.000577593, 0.00311108, -4.33364e-09, -2.83729e-09,
          -2.98344e-08, 0.132508, -0.00147968, 0.00362461, 7.55841e-10, 0.0286842, -0.000249755, -0.000313469, 2.67503e-08, -3.26454e-09, -0.112664, -2.55154e-08, 0.00316414, 9.12634e-06, 2.94706e-05, 6.29731e-09, -3.74354e-09,
          -0.0269881, 1.1112e-07, -1.15888e-07, 3.26075e-08, 0.111589, 7.29432e-08, -3.68182e-08, -4.22882e-08, -6.82025e-08, 2.92286e-08, -2.55154e-08, -0.17259, -5.78498e-08, -9.45104e-08, 2.34917e-08, -0.0427377, 0.00896338,
          -2.13239e-06, -0.0402288, 0.000363237, -0.000716146, -1.43489e-08, 0.0853922, -0.000249614, -0.00025868, -3.58992e-06, -3.07662e-05, 0.00316414, -5.78498e-08, -0.131712, -1.06678e-08, 2.79713e-08, 1.92221e-07, -7.78508e-10,
          -3.09447e-06, 0.000418149, 0.0401121, -0.00315591, 1.23778e-08, -0.000150722, -0.0806557, 0.0280471, 0.00311123, 0.000577593, 9.12634e-06, -9.45104e-08, -1.06678e-08, -0.131712, 2.65503e-07, 2.62621e-07, 2.69838e-10,
          -4.98945e-08, 0.000685308, -0.00316551, -0.0401082, -9.2956e-09, -0.000326281, -0.0280463, -0.0806557, -0.000577989, 0.00311108, 2.94706e-05, 2.34917e-08, 2.79713e-08, 2.65503e-07, -0.131712, 5.71293e-09, -9.80113e-10,
          0.11249, -1.62313e-08, 7.90554e-09, -7.83667e-09, 0.101203, -1.86634e-07, 8.95564e-08, 1.90873e-08, 1.57751e-08, -4.33364e-09, 6.29731e-09, -0.0427377, 1.92221e-07, 2.62621e-07, 5.71293e-09, -0.10267, 0.0171175,
          -0.00337645, 4.06964e-09, 3.08003e-09, 1.75034e-09, -0.00966821, -1.08635e-09, 1.72272e-09, 8.04122e-10, 2.46073e-09, -2.83729e-09, -3.74354e-09, 0.00896338, -7.78508e-10, 2.69838e-10, -9.80113e-10, 0.0171175, -0.0285864;

  bool check_x = x_ref.isApprox(x, 1e-5);
  if (!check_x) {
    cout << "Sigma X" << endl;
    cout << x << endl;
    cout << "Sigma X ref" << endl;
    cout << x_ref << endl;
  }
  BOOST_CHECK_EQUAL(check_x, true);

  sigma.PrepareScreening();
  sigma.set_HedinApprox(false);
  
  Eigen::VectorXd c_diag = sigma.CalcCorrelationDiag(mo_energy);
  Eigen::MatrixXd c_off = sigma.CalcCorrelationOffDiag(mo_energy);

  c_off.diagonal() = c_diag;
  Eigen::MatrixXd c_ref = Eigen::MatrixXd::Zero(17, 17);
  c_ref << 0.196943, -0.00225127, -0.00364255, -0.00181032, 0.0441981, 0.00388605, -0.000182177, 0.00263478, -0.000261152, 0.000117677, 0.00127982, -0.0175843, -0.00160784, -0.000418943, 0.000998808, -0.00869966, 0.0043183,
          -0.00225127, 0.099738, -0.000944702, -0.00101568, -0.000491057, 0.00218254, 0.000625268, -0.00155179, 0.0217239, -0.0161222, -0.031099, 0.00181351, -0.0322611, 0.000737258, -0.000318434, 0.0103804, 2.20157e-05,
          -0.00364255, -0.000944702, 0.122508, 0.010919, -0.00321331, 0.0011904, -0.0200692, 0.0252245, 0.0247901, 0.0259504, -0.0184296, 0.00150757, -0.000166685, 0.0264043, -9.59109e-05, -0.00620449, -0.000816674,
          -0.00181032, -0.00101568, 0.010919, 0.109276, -0.00221379, 0.00120765, -0.00943952, 0.0156714, -0.0194675, -0.0238088, -0.020374, 0.000440745, -0.001365, -0.00423171, -0.0285498, -0.0111616, -0.000614854,
          0.0441981, -0.000491057, -0.00321331, -0.00221379, -0.0632208, 0.00050587, -2.92767e-05, 0.000370295, -0.0327983, 0.0434856, -0.000300444, 0.00445393, 0.00243494, 0.00058283, -0.00142829, -0.00773739, 0.00403757,
          0.00388605, 0.00218254, 0.0011904, 0.00120765, 0.00050587, -0.0192467, -7.03921e-06, -0.000178042, 0.00678422, 0.0354095, 0.0614414, 0.000115474, 0.0786648, -5.70092e-05, -0.000441766, 0.0025129, -9.24487e-06,
          -0.000182177, 0.000625268, -0.0200692, -0.00943952, -2.92767e-05, -7.03921e-06, -0.0204097, 0.000493638, 0.00131793, -0.026182, -0.0240884, -1.69171e-05, -0.000273896, -0.0743102, -0.0259789, -0.00143989, 9.81584e-07,
          0.00263478, -0.00155179, 0.0252245, 0.0156714, 0.000370295, -0.000178042, 0.000493638, -0.0207201, 0.0134413, -0.0697939, -0.029106, 0.000134584, -2.52069e-05, 0.0256946, -0.0742832, 0.00590034, -9.07085e-06,
          -0.000261152, 0.0217239, 0.0247901, -0.0194675, -0.0327983, 0.00678422, 0.00131793, 0.0134413, -0.0771374, 0.0116063, -0.00590477, 0.0188473, -0.0111364, 0.0324231, 0.00661854, -0.0183737, 0.00258794,
          0.000117677, -0.0161222, 0.0259504, -0.0238088, 0.0434856, 0.0354095, -0.026182, -0.0697939, 0.0116063, -0.144291, -0.036342, -0.0261682, -0.0132108, 0.00954089, -0.0141197, 0.0212469, -0.00354514,
          0.00127982, -0.031099, -0.0184296, -0.020374, -0.000300444, 0.0614414, -0.0240884, -0.029106, -0.00590477, -0.036342, -0.133795, -0.00091025, -0.00461185, -0.0136521, -0.0116204, 0.00244327, -0.000126356,
          -0.0175843, 0.00181351, 0.00150757, 0.000440745, 0.00445393, 0.000115474, -1.69171e-05, 0.000134584, 0.0188473, -0.0261682, -0.00091025, -0.187572, 0.00862804, 0.00221961, -0.00531313, -0.0241895, 0.000407662,
          -0.00160784, -0.0322611, -0.000166685, -0.001365, 0.00243494, 0.0786648, -0.000273896, -2.52069e-05, -0.0111364, -0.0132108, -0.00461185, 0.00862804, -0.562178, 0.00134031, -0.00317029, 0.0134327, 0.000101333,
          -0.000418943, 0.000737258, 0.0264043, -0.00423171, 0.00058283, -5.70092e-05, -0.0743102, 0.0256946, 0.0324231, 0.00954089, -0.0136521, 0.00221961, 0.00134031, -0.545769, -0.00375213, 0.00373293, 2.75313e-05,
          0.000998808, -0.000318434, -9.59109e-05, -0.0285498, -0.00142829, -0.000441766, -0.0259789, -0.0742832, 0.00661854, -0.0141197, -0.0116204, -0.00531313, -0.00317029, -0.00375213, -0.549042, -0.00985179, -6.46788e-05,
          -0.00869966, 0.0103804, -0.00620449, -0.0111616, -0.00773739, 0.0025129, -0.00143989, 0.00590034, -0.0183737, 0.0212469, 0.00244327, -0.0241895, 0.0134327, 0.00373293, -0.00985179, -0.00493579, 0.00285144,
          0.0043183, 2.20157e-05, -0.000816674, -0.000614854, 0.00403757, -9.24487e-06, 9.81584e-07, -9.07085e-06, 0.00258794, -0.00354514, -0.000126356, 0.000407662, 0.000101333, 2.75313e-05, -6.46788e-05, 0.00285144, -0.000146109;
  
  bool check_c_diag = c_diag.isApprox(c_ref.diagonal(), 1e-5);
  if (!check_c_diag) {
    cout << "Sigma C" << endl;
    cout << c_diag << endl;
    cout << "Sigma C ref" << endl;
    cout << c_ref.diagonal() << endl;
  }
  BOOST_CHECK_EQUAL(check_c_diag, true);

  bool check_c = c_ref.isApprox(c_off, 1e-5);
  if (!check_c) {
    cout << "Sigma C" << endl;
    cout << c_off << endl;
    cout << "Sigma C ref" << endl;
    cout << c_ref << endl;
  }
  BOOST_CHECK_EQUAL(check_c, true);
  
  sigma.set_HedinApprox(true);

  Eigen::VectorXd c_diag_Hedin = sigma.CalcCorrelationDiag(mo_energy);
  Eigen::MatrixXd c_off_Hedin = sigma.CalcCorrelationOffDiag(mo_energy);

  c_off_Hedin.diagonal() = c_diag_Hedin;
  Eigen::MatrixXd c_ref_Hedin = Eigen::MatrixXd::Zero(17, 17);
  c_ref_Hedin << 0.291023, 0.000239204, -1.89588e-05, -5.63039e-05, -0.00106187, 0.00198904, -0.000100308, 0.00137791, -6.27508e-05, 0.000107673, -0.000239951, 0.00312967, -0.000233899, -7.30609e-05, 0.000166568, -0.020783, -0.0213214,
          0.000239204, 0.0670534, -0.000249767, -0.000446205, -0.000222167, -0.023382, -0.000315256, -2.51526e-05, -0.000191324, -0.000203226, 0.0134367, 0.00190511, 0.000771089, 7.65314e-05, -0.000257608, -0.000747662, 0.000341938,
          -1.89588e-05, -0.000249767, 0.0681592, 2.67362e-05, 7.529e-05, 0.000132519, -0.0210142, 0.0091085, -0.0117521, -0.00165918, -4.35464e-05, -0.000648057, -0.000181351, -0.00210365, 0.000496759, 0.000252954, -0.000111762,
          -5.63039e-05, -0.000446205, 2.67362e-05, 0.068018, 0.000135546, -0.000414254, 0.00933144, 0.0210535, -0.000878276, 0.0123264, 0.000580021, -0.00116484, -0.000295487, -0.000195022, 0.00175346, 0.000454736, -0.000202471,
          -0.00106187, -0.000222167, 7.529e-05, 0.000135546, -0.138614, 0.000301543, -1.97515e-05, 0.00023261, -0.000107086, 0.000154805, -0.000214935, 0.010684, 0.00126065, 0.000330151, -0.000783773, 0.0277722, -0.0259767,
          0.00198904, -0.023382, 0.000132519, -0.000414254, 0.000301543, 0.00727434, 1.52154e-05, -0.000415924, -7.29456e-05, -0.000294178, 0.020419, 0.000824951, 0.01264, 0.00016195, -0.000462827, -0.000143997, 6.45743e-05,
          -0.000100308, -0.000315256, -0.0210142, 0.00933144, -1.97515e-05, 1.52154e-05, 0.00541665, 0.000659168, -0.0186774, -0.0101115, -0.000148511, -4.10953e-05, -9.16529e-05, -0.0133954, -0.00428914, 4.4098e-06, -1.23604e-06,
          0.00137791, -2.51526e-05, 0.0091085, 0.0210535, 0.00023261, -0.000415924, 0.000659168, 0.00503111, 0.0110864, -0.0184906, -0.000235428, 0.000564741, 0.000468754, 0.00500365, -0.0133229, -8.45592e-05, 3.39999e-05,
          -6.27508e-05, -0.000191324, -0.0117521, -0.000878276, -0.000107086, -7.29456e-05, -0.0186774, 0.0110864, -0.085776, -0.000446036, 0.000176855, -0.00040296, -0.000209761, -0.00126092, 0.000720515, -0.000166032, -8.13669e-05,
          0.000107673, -0.000203226, -0.00165918, 0.0123264, 0.000154805, -0.000294178, -0.0101115, -0.0184906, -0.000446036, -0.086587, -0.000272907, 0.000616466, 0.000316199, 0.000380559, -0.000579063, 0.000258735, 0.000125059,
          -0.000239951, 0.0134367, -4.35464e-05, 0.000580021, -0.000214935, 0.020419, -0.000148511, -0.000235428, 0.000176855, -0.000272907, -0.0878919, -0.0010222, 0.000869372, -0.00015031, 0.000362719, -0.000456178, -0.00021246,
          0.00312967, 0.00190511, -0.000648057, -0.00116484, 0.010684, 0.000824951, -4.10953e-05, 0.000564741, -0.00040296, 0.000616466, -0.0010222, -0.239595, 0.00158906, 0.000484499, -0.00110662, -0.0285193, 0.0228809,
          -0.000233899, 0.000771089, -0.000181351, -0.000295487, 0.00126065, 0.01264, -9.16529e-05, 0.000468754, -0.000209761, 0.000316199, 0.000869372, 0.00158906, -0.22279, 0.000196489, -0.000479149, -0.000644159, 8.35432e-05,
          -7.30609e-05, 7.65314e-05, -0.00210365, -0.000195022, 0.000330151, 0.00016195, -0.0133954, 0.00500365, -0.00126092, 0.000380559, -0.00015031, 0.000484499, 0.000196489, -0.220059, -0.000867641, -0.000160134, 2.35092e-05,
          0.000166568, -0.000257608, 0.000496759, 0.00175346, -0.000783773, -0.000462827, -0.00428914, -0.0133229, 0.000720515, -0.000579063, 0.000362719, -0.00110662, -0.000479149, -0.000867641, -0.220723, 0.000386353, -5.53216e-05,
          -0.020783, -0.000747662, 0.000252954, 0.000454736, 0.0277722, -0.000143997, 4.4098e-06, -8.45592e-05, -0.000166032, 0.000258735, -0.000456178, -0.0285193, -0.000644159, -0.000160134, 0.000386353, -0.134213, 0.030299,
          -0.0213214, 0.000341938, -0.000111762, -0.000202471, -0.0259767, 6.45743e-05, -1.23604e-06, 3.39999e-05, -8.13669e-05, 0.000125059, -0.00021246, 0.0228809, 8.35432e-05, 2.35092e-05, -5.53216e-05, 0.030299, -0.712057;

  bool check_c_diag_Hedin = c_diag_Hedin.isApprox(c_ref_Hedin.diagonal(), 1e-5);
  if (!check_c_diag_Hedin) {
    cout << "Sigma C" << endl;
    cout << c_diag_Hedin << endl;
    cout << "Sigma C ref" << endl;
    cout << c_ref_Hedin.diagonal() << endl;
  }
  BOOST_CHECK_EQUAL(check_c_diag_Hedin, true);

  bool check_c_Hedin = c_ref_Hedin.isApprox(c_off_Hedin, 1e-5);
  if (!check_c_Hedin) {
    cout << "Sigma C" << endl;
    cout << c_off_Hedin << endl;
    cout << "Sigma C ref" << endl;
    cout << c_ref_Hedin << endl;
  }
  BOOST_CHECK_EQUAL(check_c_Hedin, true);

}

BOOST_AUTO_TEST_SUITE_END()
